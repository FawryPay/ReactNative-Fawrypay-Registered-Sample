package com.fawrypay.rnfawrypaysdk

import android.app.Activity
import android.icu.text.SimpleDateFormat
import android.util.Log
import com.facebook.react.bridge.*
import com.facebook.react.modules.core.DeviceEventManagerModule
import com.fawry.fawrypay.FawrySdk
import com.fawry.fawrypay.interfaces.FawryPreLaunch
import com.fawry.fawrypay.interfaces.FawrySdkCallbacks
import com.fawry.fawrypay.models.*
import com.google.gson.Gson
import java.sql.Date

class RnFawryPaySdkModule(reactContext: ReactApplicationContext) :
  ReactContextBaseJavaModule(reactContext) {

  override fun getName(): String {
    return NAME
  }

  private fun getMerchantInfo(merchantInfo: ReadableMap?): LaunchMerchantModel {
    return LaunchMerchantModel(
      merchantCode = merchantInfo?.getString("merchantCode") ?: "",
      subMerchantCode = merchantInfo?.getString("subMerchantCode"),
      secretCode = merchantInfo?.getString("merchantSecretCode"),
      merchantRefNum = merchantInfo?.getString("merchantRefNum")
    )
  }

  private fun getCustomerInfo(customerInfo: ReadableMap?): LaunchCustomerModel {
    return LaunchCustomerModel(
      customerName = customerInfo?.getString("customerName"),
      customerEmail = customerInfo?.getString("customerEmail"),
      customerMobile = customerInfo?.getString("customerMobile"),
      customerCif = customerInfo?.getString("customerCif"),
      customerToken = customerInfo?.getString("customerToken") ?: "",
      customerProfileId = customerInfo?.getString("customerProfileId") ?: ""
    )
  }

  private fun getChargeItems(items: ReadableArray): ArrayList<PayableItem> {
    val chargeItems = ArrayList<PayableItem>()
    for (i in 0 until items.size()) {
      chargeItems.add(
        BillItems(
          itemId = items.getMap(i).getString("itemId"),
          description = items.getMap(i).getString("description"),
          quantity = items.getMap(i).getString("quantity"),
          price = items.getMap(i).getString("price"),
          originalPrice = items.getMap(i).getString("originalPrice"),
          width = items.getMap(i).getString("width"),
          height = items.getMap(i).getString("height"),
          weight = items.getMap(i).getString("weight"),
          variantCode = items.getMap(i).getString("variantCode"),
          earningRuleId = items.getMap(i).getString("earningRuleId"),
          imageUrl = items.getMap(i).getString("imageUrl"),
          specialRequest = items.getMap(i).getString("specialRequest"),
          tax = items.getMap(i).getDouble("tax")
        )
      )
    }
    return chargeItems
  }

  @ReactMethod
  fun startPayment(
    baseUrl: String,
    lang: String,
    addressHierarchy: String,
    allow3DPayment: Boolean,
    apiPath: String,
    customerInfo: ReadableMap,
    items: ReadableArray,
    merchantInfo: ReadableMap,
    showLoyaltyContainer: Boolean,
    showTipsView: Boolean,
    showVoucherContainer: Boolean,
    skipReceipt: Boolean,
    optionalPaymentParams: ReadableMap,
    ) {

    try {
      var selectedLang = if (lang == "ARABIC") {
        FawrySdk.Languages.ARABIC
      } else {
        FawrySdk.Languages.ENGLISH
      }

      val scheduledTime = optionalPaymentParams.getString("scheduledTime")

      val shippingAddressMap = optionalPaymentParams.getMap("shippingAddress")
      val shippingAddressJSON = Gson().toJson(shippingAddressMap?.toHashMap())
      val shippingAddress: ShippingAddress =
        Gson().fromJson(shippingAddressJSON, ShippingAddress::class.java)

      var addressHierarchyType = FawrySdk.AddressHierarchy.GEOLOCATION

      if (addressHierarchy.toLowerCase() == "matrix") {
        addressHierarchyType = FawrySdk.AddressHierarchy.MATRIX
      }

      FawrySdk.launchSdk(
        reactApplicationContext.currentActivity!!,
        FawrySdk.LaunchMode.PAYMENT,
        _languages = selectedLang,
        _baseUrl = baseUrl,
        FawryLaunchModel(
          launchCustomerModel = getCustomerInfo(customerInfo),
          launchMerchantModel = getMerchantInfo(merchantInfo),
          allow3DPayment = allow3DPayment,
          chargeItems = getChargeItems(items),
          showTipsView = showTipsView,
          branchCode = optionalPaymentParams.getString("branchCode"),
          serviceTypeCode = optionalPaymentParams.getString("serviceTypeCode"),
          shippingAddress = shippingAddress,
          skipReceipt = skipReceipt,
          showLoyaltyContainer = showLoyaltyContainer,
          showVoucherContainer = showVoucherContainer,
          beid = optionalPaymentParams.getString("beid"),
          branchName = optionalPaymentParams.getString("branchName"),
          scheduledTime = scheduledTime?.let { Date(scheduledTime.toLong()) },
          tableId = optionalPaymentParams.getInt("tableId"),
          addressHierarchy = addressHierarchyType,
          apiPath = apiPath
        ),
        _callback = object : FawrySdkCallbacks {
          override fun onFailure(error: String) {
            // Emit failure event to JavaScript
            reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
              .emit(FAWRY_EVENT_ON_FAIL, error)

            // Additional: Handle the failure gracefully within the native module
            // Example: Log the error or show a native error dialog
            // Logger.error("Fawry Payment Failure: $error")
            // showErrorDialog("Payment Failed", "An error occurred during payment. Please try again.")
          }

          override fun onInit() {
            // Handle initialization, if needed
          }

          override fun onPaymentCompleted(msg: String, data: Any?) {
            // Emit success event to JavaScript
            reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
              .emit(FAWRY_EVENT_ON_SUCCESS, data)
          }

          override fun onPreLaunch(onPreLaunch: FawryPreLaunch) {
            // Continue with the launch process
            onPreLaunch.onContinue()
          }

          override fun onSuccess(msg: String, data: Any?) {
            // Emit payment completed event to JavaScript
            reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
              .emit(FAWRY_EVENT_PAYMENT_COMPLETED, data)
          }
        },
        application = reactApplicationContext.currentActivity!!.application
      )
    } catch (e: Exception) {
      // Handle unexpected exceptions
      val errorMessage = "An unexpected error occurred: ${e.message}"
      reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
        .emit(FAWRY_EVENT_ON_FAIL, errorMessage)

      // Additional: Log the error or show a native error dialog
      // Logger.error("Unexpected Error: $errorMessage")
      // showErrorDialog("Error", "An unexpected error occurred. Please try again.")
    }
  }

  @ReactMethod
  fun openCardsManager(
    baseUrl: String,
    lang: String,
    merchantInfo: ReadableMap,
    customerInfo: ReadableMap,
  ) {

    try {
      var selectedLang = if (lang == "ARABIC") {
        FawrySdk.Languages.ARABIC
      } else {
        FawrySdk.Languages.ENGLISH
      }

      FawrySdk.launchSdk(
        activity = reactApplicationContext.currentActivity!!,
        _baseUrl = baseUrl,
        _launchMode = FawrySdk.LaunchMode.MANAGE_CARDS,
        _languages = selectedLang,
        _fawryLaunchModel = FawryLaunchModel(
          launchCustomerModel = getCustomerInfo(customerInfo),
          launchMerchantModel = getMerchantInfo(merchantInfo),
        ),
        _callback = object : FawrySdkCallbacks {
          override fun onPreLaunch(onPreLaunch: FawryPreLaunch) {
            onPreLaunch.onContinue()
          }

          override fun onInit() {
            // Handle initialization, if needed
          }

          override fun onSuccess(msg: String, data: Any?) {
            // Handle success, if needed
            reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
              .emit(FAWRY_EVENT_ON_SUCCESS, data)
          }

          override fun onPaymentCompleted(msg: String, data: Any?) {
            // Handle payment completed, if needed
            reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
              .emit(FAWRY_EVENT_PAYMENT_COMPLETED, data)
          }

          override fun onFailure(error: String) {
            reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
              .emit(FAWRY_EVENT_CARD_MANAGER_FAIL, error)
          }
        },
        application = reactApplicationContext.currentActivity!!.application
      )

    } catch (e: Exception) {
      // Handle unexpected exceptions
      val errorMessage = "An unexpected error occurred: ${e.message}"
      reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
        .emit(FAWRY_EVENT_CARD_MANAGER_FAIL, errorMessage)

      // Additional: Log the error or show a native error dialog
      // Logger.error("Unexpected Error: $errorMessage")
      // showErrorDialog("Error", "An unexpected error occurred. Please try again.")
    }
  }

  @ReactMethod
  fun openAddressManager(
    baseUrl: String,
    lang: String,
    merchantInfo: ReadableMap,
    customerInfo: ReadableMap,
    beid: String,
    addressHierarchy: String,
  ) {

    try {
      var selectedLang = if (lang == "ARABIC") {
        FawrySdk.Languages.ARABIC
      } else {
        FawrySdk.Languages.ENGLISH
      }

      var addressHierarchyType = FawrySdk.AddressHierarchy.GEOLOCATION

      if (addressHierarchy.toLowerCase() == "matrix") {
        addressHierarchyType = FawrySdk.AddressHierarchy.MATRIX
      }

      FawrySdk.launchSdk(
        activity = reactApplicationContext.currentActivity!!,
        _baseUrl = baseUrl,
        _launchMode = FawrySdk.LaunchMode.MANAGE_ADDRESS,
        _languages = selectedLang,
        _fawryLaunchModel = FawryLaunchModel(
          launchCustomerModel = getCustomerInfo(customerInfo),
          launchMerchantModel = getMerchantInfo(merchantInfo),
          beid = beid,
          addressHierarchy = addressHierarchyType
        ),
        _callback = object : FawrySdkCallbacks {
          override fun onPreLaunch(onPreLaunch: FawryPreLaunch) {
            onPreLaunch.onContinue()
          }

          override fun onInit() {
            // Handle initialization, if needed
          }

          override fun onSuccess(msg: String, data: Any?) {
            // Handle success, if needed
            reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
              .emit(FAWRY_EVENT_ON_SUCCESS, data)
          }

          override fun onPaymentCompleted(msg: String, data: Any?) {
            // Handle payment completed, if needed
            reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
              .emit(FAWRY_EVENT_PAYMENT_COMPLETED, data)
          }

          override fun onFailure(error: String) {
            reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
              .emit(FAWRY_EVENT_ADDRESS_MANAGER_FAIL, error)
          }
        },
        application = reactApplicationContext.currentActivity!!.application
      )

    } catch (e: Exception) {
      // Handle unexpected exceptions

      val errorMessage = "An unexpected error occurred: ${e.message}"
      Log.e("kamal", "openAddressManager: $errorMessage" )

      reactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
        .emit(FAWRY_EVENT_ADDRESS_MANAGER_FAIL, errorMessage)

      // Additional: Log the error or show a native error dialog
      // Logger.error("Unexpected Error: $errorMessage")
      // showErrorDialog("Error", "An unexpected error occurred. Please try again.")
    }
  }

  companion object {
    const val NAME = "RnFawryPaySdk"
    const val FAWRY_EVENT_PAYMENT_COMPLETED = "FAWRY_EVENT_PAYMENT_COMPLETED"
    const val FAWRY_EVENT_ON_SUCCESS = "FAWRY_EVENT_ON_SUCCESS"
    const val FAWRY_EVENT_ON_FAIL = "FAWRY_EVENT_ON_FAIL"
    const val FAWRY_EVENT_CARD_MANAGER_FAIL = "FAWRY_EVENT_CARD_MANAGER_FAIL"
    const val FAWRY_EVENT_ADDRESS_MANAGER_FAIL = "FAWRY_EVENT_ADDRESS_MANAGER_FAIL"
  }
}
